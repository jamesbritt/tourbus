= Contact App

Silly little contact app to show you how to tour a website.

= Requirements

In addition to tourbus, you will need Sinatra to run
this app.

  sudo gem install sinatra

= Contact App

== Start the app

Once that's working, start the app with "ruby contact_app.rb". Sinatra
should start up, and you can now point your browser at
http://localhost:4567 to see the app's homepage.

Pretty humble, I know; just the one link labeled Enter Contacts. Click
it to get to the Contact form. Here you can enter a first and last
name then click submit.

The app then shows you that name in last_name, first_name format.
That's the whole app. Don't everybody applaud all at once.

== First Tour

Still here? Okay, let's tour this website.

In the tours folder, you will find two files: simple.rb and
tourbus.yml. The YAML file just sets the default host to
localhost:4567. (Without it, tourbus will default to http://localhost:3000.
You could override this by running tourbus with "-h localhost:4567"
every time, but that gets tedious.

Before we go any farther, let's run tourbus. Leave Sinatra running and
open another terminal window. Go into the contact_app folder and just
type "tourbus". You should get a screenful of information ending with
a happy little banner something like this:

  2009-01-10 12:09:36 TourBus: --------------------------------------------------------------------------------
  2009-01-10 12:09:36 TourBus: 1 runs: 1x1 of simple
  2009-01-10 12:09:36 TourBus: All Runners finished.
  2009-01-10 12:09:36 TourBus: Total Runs: 1
  2009-01-10 12:09:36 TourBus: Total Passes: 1
  2009-01-10 12:09:36 TourBus: Total Fails: 0
  2009-01-10 12:09:36 TourBus: Total Errors: 0
  2009-01-10 12:09:36 TourBus: Elapsed Time: 0.0131220817565918
  2009-01-10 12:09:36 TourBus: Speed: 76.207 v/s
  2009-01-10 12:09:36 TourBus: --------------------------------------------------------------------------------

== Tourbus Defaults

Tourbus tries to be sensible; if you don't provide a number of runs or
concurrency, it sets them to 1. If you don't choose a tour to run, it
runs them all. It looks for tourbus.yml in the current folder,
./tours, in ./config (a Rails convention), and in your home folder.
(It looks for them in that order, and stops as soon as it finds one.
It does not merge multiple yaml files together.)

== Simple Tour

Okay, now let's look at tours/simple.rb.

It defines a class named Simple that inherits from Tour. Tourbus won't
try to run a tour unless the file contains a Tour child class of the
same name as the file.

Inside the class, methods whose names begin with test_ will
automatically be run as part of the tour. They are not run in any
particular order.

=== test_home

Right. Let's look test_home first, because it's simpler:

    def test_home
      visit "/"
      assert_contain "If you click this"

      click_link "Enter Contact"
      assert_match /\/contacts/, current_page.url
    end

+visit+ is a webrat method that you can call inside of your tours. It opens the given path on the
host that tourbus is testing.

+assert_contain+ is also a webrat method that confirms the given string is on the page.

+click_link+ does what you'd expect. It takes a hash that identifies
the link to click. +click_link+ will raise an exception
if it cannot find the link to click.

+assert_match+ comes from Test::Unit which is used internally to webrat. It will raise an exception unless the uri
matches the given regexp.

So you should be able to use any Webrat locator or matcher, and any of the Test::Unit assertions.

=== test_contacts

Okay, let's actually submit a form.

    def test_contacts
      visit "/contacts"
  
      fill_in "first_name", :with => "Joe"
      fill_in "last_name", :with => "Tester"
      click_button 
  
      assert_contain "Tester, Joe"
    end

test_contacts starts by going directly to the contacts app. Note that
the leading "/" isn't optional.

+fill_in+ is a Webrat method that will look for form fields based on ids, label text, and other things. 
It's matchers are pretty good. Check out Webrat's documentation for more info. In the examples above, 
we're finding the fields for the first name and last name and putting in "Joe" and "Tester" respectively.
+fill_in+ asserts that the fields actually exist and will raise an exception if they don't.

+click_button+ does what its name implies. It finds the correct form to
submit Webrat is smart like that. *Note:* Like +click_link+, +click_button+
contains some implicit assertions and will raise an exception if the button doesn't exist.

+assert_contain+ we've already seen.

Good luck, and happy touring!
